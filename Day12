You need to write a function called is_prime() that checks whether if the number passed into it is a prime number or not.  It should return True or False.
e.g.
7 is a primer number because it is only divisible by 1 and itself.
But 4 is not a prime number because you can divide it by 1, 2 or 4.
NOTE: 2 is a prime number because it's only divisible by 1 and itself, but 1 is not a prime number because it is only divisible by 1.

Example Input 1
73
Example Output 1
True

Example Input 2
75
Example Output 2
False

Code-

import math

def is_prime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    max_divisor = math.isqrt(n)
    for i in range(3, max_divisor + 1, 2):
        if n % i == 0:
            return False
    return True

time complexity is O(√n)

===============================================================================================================================================================================

What are Global Variables?

Global variables are variables that are defined outside of any function. They have a global scope, meaning they can be accessed (read and modified) 
from anywhere in your program – both inside and outside functions.

Example 1: Accessing a Global Variable

# Global variable
global_variable = 10

def my_function():
  # Accessing the global variable inside a function
  print("Inside function:", global_variable)

my_function()
print("Outside function:", global_variable)

Output:

Inside function: 10
Outside function: 10


Example 2: Modifying a Global Variable

# Global variable
global_variable = 10

def modify_global():
  # Using the 'global' keyword to modify the global variable
  global global_variable  # Important!
  global_variable = 20
  print("Inside function:", global_variable)

modify_global()
print("Outside function:", global_variable)


Output:

Inside function: 20
Outside function: 20

Important Points & Best Practices:

The global keyword:  If you want to modify a global variable within a function, you must use the global keyword before using the variable name inside the function. 
Without it, Python will treat the variable as a local variable within that function, potentially creating a new variable with the same name and shadowing the global one.

Read-only access: You can access (read) the value of a global variable inside a function without using the global keyword.

Avoid excessive use: While global variables are sometimes convenient, overuse can lead to code that's harder to understand, debug, and maintain. 
They can create hidden dependencies and make it difficult to reason about how your program works.

Consider alternatives:  Before using a global variable, think about whether you can achieve the same result by:

Passing the variable as an argument to the function.
Returning a value from the function.
Using classes and object attributes. (Often the best solution for complex data.)
Naming convention: A common practice (though not enforced by Python) is to name global constants (variables that should not be changed) in all uppercase, like MAX_VALUE = 100. 
This helps signal their intended use.

Example 3: Showing potential issues without 'global'

global_variable = 10

def try_to_modify():
  global_variable = 20 #This creates a local variable, doesn't modify the global one
  print("Inside function:", global_variable)

try_to_modify()
print("Outside function:", global_variable)


Output:

Inside function: 20
Outside function: 10

In summary: Use global variables sparingly and thoughtfully.  Prioritize alternative approaches when possible to create more robust and maintainable code. 
When you do use them, always use the global keyword when modifying them within functions.

====================================================================================================================================================================================
