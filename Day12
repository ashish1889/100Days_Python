You need to write a function called is_prime() that checks whether if the number passed into it is a prime number or not.  It should return True or False.
e.g.
7 is a primer number because it is only divisible by 1 and itself.
But 4 is not a prime number because you can divide it by 1, 2 or 4.
NOTE: 2 is a prime number because it's only divisible by 1 and itself, but 1 is not a prime number because it is only divisible by 1.

Example Input 1
73
Example Output 1
True

Example Input 2
75
Example Output 2
False

Code-

import math

def is_prime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    max_divisor = math.isqrt(n)
    for i in range(3, max_divisor + 1, 2):
        if n % i == 0:
            return False
    return True

time complexity is O(√n)

===============================================================================================================================================================================

What are Global Variables?

Global variables are variables that are defined outside of any function. They have a global scope, meaning they can be accessed (read and modified) 
from anywhere in your program – both inside and outside functions.

Example 1: Accessing a Global Variable

# Global variable
global_variable = 10

def my_function():
  # Accessing the global variable inside a function
  print("Inside function:", global_variable)

my_function()
print("Outside function:", global_variable)

Output:

Inside function: 10
Outside function: 10


Example 2: Modifying a Global Variable

# Global variable
global_variable = 10

def modify_global():
  # Using the 'global' keyword to modify the global variable
  global global_variable  # Important!
  global_variable = 20
  print("Inside function:", global_variable)

modify_global()
print("Outside function:", global_variable)


Output:

Inside function: 20
Outside function: 20

Important Points & Best Practices:

The global keyword:  If you want to modify a global variable within a function, you must use the global keyword before using the variable name inside the function. 
Without it, Python will treat the variable as a local variable within that function, potentially creating a new variable with the same name and shadowing the global one.

Read-only access: You can access (read) the value of a global variable inside a function without using the global keyword.

Avoid excessive use: While global variables are sometimes convenient, overuse can lead to code that's harder to understand, debug, and maintain. 
They can create hidden dependencies and make it difficult to reason about how your program works.

Consider alternatives:  Before using a global variable, think about whether you can achieve the same result by:

Passing the variable as an argument to the function.
Returning a value from the function.
Using classes and object attributes. (Often the best solution for complex data.)
Naming convention: A common practice (though not enforced by Python) is to name global constants (variables that should not be changed) in all uppercase, like MAX_VALUE = 100. 
This helps signal their intended use.

Example 3: Showing potential issues without 'global'

global_variable = 10

def try_to_modify():
  global_variable = 20 #This creates a local variable, doesn't modify the global one
  print("Inside function:", global_variable)

try_to_modify()
print("Outside function:", global_variable)


Output:

Inside function: 20
Outside function: 10

In summary: Use global variables sparingly and thoughtfully.  Prioritize alternative approaches when possible to create more robust and maintainable code. 
When you do use them, always use the global keyword when modifying them within functions.

====================================================================================================================================================================================

Namespace and Scope-

Local Scope
Variables (or functions) declared inside functions have local scope (also called function scope). 
They are only seen by other code within the same block of code.

e.g.

def my_function():
    my_local_var = 2
    
# This will cause a NameErrorr
print(my_local_var) 
Global Scope
Variables or functions declared at the top level (unindented) of a code file have global scope. 
It is accessible anywhere in the code file.

e.g.

my_global_var = 3

def my_function():
    # This works no problems
    print(my_global_var)


Code-

enemies = 1


def increase_enemies():
    enemies = 2
    print(f"enemies inside function: {enemies}")


increase_enemies()
print(f"enemies outside function: {enemies}")


# Local Scope
def drink_potion():
    potion_strength = 2
    print(potion_strength)


drink_potion()
# Can't access this potion_strength outside of its scope
# print(potion_strength)

# Global Scope
player_health = 10


def game():
    def drink_potion():
        potion_strength = 2
        print(player_health)

    drink_potion()


print(player_health)

========================================================================================================================

Block Scope-

Python is a bit different from other programming languages in that it does not have block scope.

This means that variables created nested in other blocks of code e.g. for loops, if statements,
while loops etc. don't get local scope. They are given function scope if they are within a function 
or global scope if they are not.

e.g.

# Accessible anywhere
my_global_var = 1

def my_function():
    # Only accessible within my_function()
    my_local_var = 2
    
for _ in range(10):
    # Accessible anywhere
    my_block_var = 3


Code-

game_level = 10
enemies = ["Skeleton", "Zombie", "Alien"]


def create_enemy():
    new_enemy = ""
    if game_level < 5:
        new_enemy = enemies[0]

    print(new_enemy)


====================================================================================================================

Global vars-

You can force the code allow you to modify something with global if you use the global keyword before you use it.

e.g. This will give you an error

a = 1
def my_function():
    a += 1
    print(a)
But this will work

a = 1
def my_function():
    global a
    a += 1
    print(a)


# Modifying Global Scope

enemies = 1

# def increase_enemies():
#     global enemies
#     enemies += 1
#     print(f"enemies inside function: {enemies}")


def increase_enemies(enemy):
    print(f"enemies inside function: {enemy}")
    return enemy + 1


enemies = increase_enemies(enemies)
print(f"enemies outside function: {enemies}")


=======================================================================================================================

Global constants-

You can define global constants in your code file for easy access. Their job is meant to be "set and forget" 
so you can use their values but never need to mofy them.

Naming Convention
Global constants are normally declared in ALL_CAPS with a underscore in between.

e.g.

PI = 3.14159
GOOGLE_URL = "https://www.google.com"


Code-

from random import randint
from art import logo


EASY_LEVEL_TURNS = 10
HARD_LEVEL_TURNS = 5


# Function to check users' guess against actual answer
def check_answer(user_guess, actual_answer, turns):
    """Checks answer against guess, returns the number of turns remaining."""
    if user_guess > actual_answer:
        print("Too high.")
        return turns - 1
    elif user_guess < actual_answer:
        print("Too low.")
        return turns - 1
    else:
        print(f"You got it! The answer was {actual_answer}")


# Function to set difficulty
def set_difficulty():
    level = input("Choose a difficulty. Type 'easy' or 'hard': ")
    if level == "easy":
        return EASY_LEVEL_TURNS
    else:
        return HARD_LEVEL_TURNS


def game():
    print(logo)
    # Choosing a random number between 1 and 100.
    print("Welcome to the Number Guessing Game!")
    print("I'm thinking of a number between 1 and 100.")
    answer = randint(1, 100)
    print(f"Pssst, the correct answer is {answer}")

    turns = set_difficulty()

    # Repeat the guessing functionality if they get it wrong.
    guess = 0
    while guess != answer:
        print(f"You have {turns} attempts remaining to guess the number.")
        # Let the user guess a number
        guess = int(input("Make a guess: "))
        # Track the number of turns and reduce by 1 if they get it wrong
        turns = check_answer(guess, answer, turns)
        if turns == 0:
            print("You've run out of guesses, you lose.")
            return
        elif guess != answer:
            print("Guess again.")




game()


==================================================================================================================

Number Guessing Project-

The goal is to build a guess the number game.

Demo
https://appbrewery.github.io/python-day12-demo/

ASCII Art
You can get hold of ASCII art using the link below: https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20


Code-

from random import randint
from art import logo


EASY_LEVEL_TURNS = 10
HARD_LEVEL_TURNS = 5


# Function to check users' guess against actual answer
def check_answer(user_guess, actual_answer, turns):
    """Checks answer against guess, returns the number of turns remaining."""
    if user_guess > actual_answer:
        print("Too high.")
        return turns - 1
    elif user_guess < actual_answer:
        print("Too low.")
        return turns - 1
    else:
        print(f"You got it! The answer was {actual_answer}")


# Function to set difficulty
def set_difficulty():
    level = input("Choose a difficulty. Type 'easy' or 'hard': ")
    if level == "easy":
        return EASY_LEVEL_TURNS
    else:
        return HARD_LEVEL_TURNS


def game():
    print(logo)
    # Choosing a random number between 1 and 100.
    print("Welcome to the Number Guessing Game!")
    print("I'm thinking of a number between 1 and 100.")
    answer = randint(1, 100)
    print(f"Pssst, the correct answer is {answer}")

    turns = set_difficulty()

    # Repeat the guessing functionality if they get it wrong.
    guess = 0
    while guess != answer:
        print(f"You have {turns} attempts remaining to guess the number.")
        # Let the user guess a number
        guess = int(input("Make a guess: "))
        # Track the number of turns and reduce by 1 if they get it wrong
        turns = check_answer(guess, answer, turns)
        if turns == 0:
            print("You've run out of guesses, you lose.")
            return
        elif guess != answer:
            print("Guess again.")




game()





