Pseudorandom Number Generators
Computers are not random, because they are built with circuits and switches. But randomness is very important when building software, especially games. 
It would be really boring if every move in a video game was pre-determined.

So, some computer scientists invented pseudorandom number generators. e.g. https://en.wikipedia.org/wiki/Mersenne_Twister

If you want to learn more about pseudorandom number generators, I recommend watching this video by
Khan Academy: https://www.youtube.com/watch?v=GtOt7EBNEwQ&ab_channel=KhanAcademyLabs

The Random module in Python
Read the docs here: https://docs.python.org/3/library/random.html

To use it you need to first import it:

import random

Random Whole Numbers Within a Range
import random
rand_num = random.randint(1, 10)

#This will produce a random whole number between 1 and 10 (inclusive).

Modules in Python
Python allows us to put code into different files and import that code if needed. This means that we can better organise and modularise our code.

You can create a new module simply by creating a new .py file, and then you can import variables or functions from that file just by using the import keyword.

Random Floats

You can generate a random number between 0.0 (inclusive) and 1.0 (not inclusive) using the following code from the random module:

import random
rand_num_0_to_1 = random.random()
It can also be represented like this

0.0 <= random.random() < 1.0

You can expand the range of random numbers generated by this method using multiplication.

e.g. random.random() * 5

Will generate a random number between 0 and 5.

Another way to generate random floating point numbers is to use the uniform() function.

import random
random_float = random.uniform(1, 10)
#This will generate a random floating point number between 1 and 10. 
This method may or may not include the upper bound depending on the rounding of the floating point number. So it's best represented as:

a <= random.uniform(a,b) <= b

So depending on if you want the upper bound included you will choose whether to use random.random() or random.uniform().

=============================================================================================================================================================

import random

random_integer = random.randint(1, 10)
print(random_integer)

random_number_0_to_1 = random.random() * 10
print(random_number_0_to_1)

random_float = random.uniform(1, 10)
print(random_float)

random_heads_or_tails = random.randint(0, 1)
if random_heads_or_tails == 0:
    print("Heads")
else:
    print("Tails")

O/p-

5
0.40390997346675395
7.648336985467423
Tails

===================================================================================================================================================================

You can create a simple collection of ordered items using a Python list. e.g.

fruits = ["Cherry", "Apple", "Pear"]

Accessing Items in Lists
You can provide the name of the list then a square bracket and then the item index that you want. e.g.
fruits[0] will give-> Cherry

Negative Indices
You can access items in the list counting from the end of the list by using negative whole numbers. e.g.

fruits = ["Cherry", "Apple", "Pear"]

fruits[-1] #this will be "Pear"
Modifying Items
You can use the same syntax to get hold of items in a List to modify it. e.g.

fruits = ["Cherry", "Apple", "Pear"]
fruits[0] = "Orange"
# fruits will now become ["Orange", "Apple", "Pear"]

Adding Items
You can add items to the end of a List using the append() function. e.g.

fruits = ["Cherry", "Apple", "Pear"]
fruits.append("Orange")
# fruits will now become ["Cherry", "Apple", "Pear", "Orange"]

fruits.extend(["Mango","Grapes"])

# fruits will now become ['Cherry', 'Apple', 'Pear', 'Orange', 'Mango', 'Grapes']



Lists Documentation
You can find the documentation for Python Lists and other 
List related functions here: https://docs.python.org/3/tutorial/datastructures.html

===================================================================================================================================================================

import random
friends = ["Alice", "Bob", "Charlie", "David", "Emanuel"]

# 1st Option
print(random.choice(friends))

# 2nd Option
random_index = random.randint(0, 4)
print(friends[random_index])


O/p-

Charlie
David

# Above o/p will be random

========================================================================================================================================================================

Length of List
You can get the length of a list (number of items in the list) or the length of a string (number characters in the string) by using the len() function.
https://docs.python.org/3/library/functions.html#len

IndexError
When you try to access an item that is not in the range of the List, you will get an IndexError. e.g.

fruits = ["Cherry", "Apple", "Pear"]
print(fruits[3]) #This will be an IndexError

Nested Lists
You can put Lists inside other Lists, this becomes something called a "Nested List" or a "2D List". e.g.

fruits = ["Cherry", "Apple", "Pear"]
veg = ["Cucumber", "Kale", "Spinnach"]
fruits_and_veg = [fruits, veg]
#The list would look like this: [["Cherry", "Apple", "Pear"], ["Cucumber", "Kale", "Spinnach"]]
You could also represent the list in 2D format like this:
["Cherry", "Apple", "Pear"]
["Cucumber", "Kale", "Spinnach"]



fruits = ["Strawberries", "Nectarines", "Apples", "Grapes", "Peaches", "Cherries", "Pears"]
vegetables = ["Spinach", "Kale", "Tomatoes", "Celery", "Potatoes"]

dirty_dozen = [fruits, vegetables]
print(dirty_dozen)

O/p-

[['Strawberries', 'Nectarines', 'Apples', 'Grapes', 'Peaches', 'Cherries', 'Pears'], ['Spinach', 'Kale', 'Tomatoes', 'Celery', 'Potatoes']]


Quiz question-

Given the code below:
fruits = ["Strawberries", "Nectarines", "Apples", "Grapes", "Peaches", "Cherries", "Pears"]
vegetables = ["Spinach", "Kale", "Tomatoes", "Celery", "Potatoes"]
 
dirty_dozen = [fruits, vegetables]
 
print(dirty_dozen[1][1])
What will be printed?


What's going on?
This question combines several of the Python List concepts that we’ve seen in the previous lessons in isolation. 
If the code above is at all confusing, I recommend breaking down what’s going on using several print statements 
using repl.it. First, try printing out:
print(dirty_dozen)
Then print out:
print(dirty_dozen[0])
print(dirty_dozen[1])
To see what happens at the next stage print out:
print(dirty_dozen[1][2])
print(dirty_dozen[1][3])
