Code to draw a square by Turtle-

from turtle import Turtle,Screen

tim = Turtle()
window = Screen()

tim.forward(100)
tim.left(90)
tim.forward(100)
tim.left(90)
tim.forward(100)
tim.left(90)
tim.forward(100)
tim.left(90)

window.exitonclick()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>============================================================<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Using alias for the same functionality below is the code-

import turtle as t  #alias 
tim = t.Turtle()
window = t.Screen()

tim.forward(100)
tim.left(90)
tim.forward(100)
tim.left(90)
tim.forward(100)
tim.left(90)
tim.forward(100)
tim.left(90)

window.exitonclick()

============================================================================================================================================================
Drawing a dashed line-


import turtle as t
tim = t.Turtle()
window = t.Screen()

for _ in range(15):
    tim.forward(10)
    tim.penup()
    tim.forward(10)
    tim.pendown()



window.exitonclick()

===============================================================================================================================================================

Code to draw various shapes-


import turtle as t
import random

tim = t.Turtle()
window = t.Screen()

colours = ["CornflowerBlue","DarkOrchid","IndianRed","DeepSkyBlue","wheat"]

def draw_shape(num_sides):
    angle = 360 / num_sides
    for _ in range(num_sides):
        tim.forward(100)
        tim.right(angle)

# here range will exclude the last index - [3,11)
for shape_side_n in range(3,11):
    tim.color(random.choice(colours))
    draw_shape(shape_side_n)

========================================================================================================================================================================

Generate a random walk-


import turtle as t
import random

tim = t.Turtle()
window = t.Screen()

colours = ["CornflowerBlue","DarkOrchid","IndianRed","DeepSkyBlue","wheat"]

directions = [0,90,180,270]
tim.pensize(15)
tim.speed("fastest")

for _ in range(200):
    tim.color(random.choice(colours))
    tim.forward(30)
    tim.setheading(random.choice(directions))
window.exitonclick()



window.exitonclick()

=========================================================================================================================================

Tuple in Python-

my_tuple = (1,3,8) #Tuple definition

my_tuple[2] = 12 #will throw error as tuple cannot be modified

==========================================================================================================================================

Python tuples to generate random RGB tuples


import turtle as t
import random

tim = t.Turtle()
window = t.Screen()
t.colormode(255)

def random_color():
    r = random.randint(0,255)
    g = random.randint(0,255)
    b = random.randint(0,255)
    random_color = (r,g,b)
    return random_color



directions = [0,90,180,270]
tim.pensize(15)
tim.speed("fastest")

for _ in range(200):
    tim.color(random_color())
    tim.forward(30)
    tim.setheading(random.choice(directions))
window.exitonclick()

==========================================================================================================================================

Draw a Spirograph-


import turtle as t
import random

tim = t.Turtle()
window = t.Screen()
t.colormode(255)

def random_color():
    r = random.randint(0,255)
    g = random.randint(0,255)
    b = random.randint(0,255)
    random_color = (r,g,b)
    return random_color

tim.speed("fastest")

def draw_spirograph(size_of_gap):
    for _ in range(int(360 / size_of_gap)):
        tim.color(random_color())
        tim.circle(100)
        tim.setheading(tim.heading() + size_of_gap)

draw_spirograph(5)

window.exitonclick()

==========================================================================================================================================

import colorgram

rgb_colors = []
colors = colorgram.extract('spots.jpg',30)
for color in colors:
    r = color.rgb.r
    g = color.rgb.g
    b = color.rgb.b
    new_color = (r,g,b)
    rgb_colors.append(new_color)

print(rgb_colors)

O/p-

/Users/ashishmishra/PycharmProjects/day-18-start/.venv/bin/python /Users/ashishmishra/PycharmProjects/day-18-start/main.py 
[(229, 228, 226), (225, 223, 224), (199, 175, 118), (125, 36, 24), (187, 158, 50), (170, 105, 56), (5, 57, 83), (222, 223, 226), (200, 216, 205), (108, 67, 85), (39, 36, 35), (86, 142, 58), (20, 123, 176), (110, 161, 175), (75, 39, 47), (9, 67, 47), (64, 153, 137), (133, 41, 43), (184, 98, 80), (179, 201, 186), (210, 200, 113), (179, 175, 177), (151, 176, 164), (93, 142, 156), (28, 80, 59), (194, 190, 192), (17, 78, 98), (213, 184, 173), (145, 116, 121), (176, 197, 202)]

Process finished with exit code 0

==============================================================================================================================================================

Hirst Painting of drawing Dots-


import random
import turtle as t

tim = t.Turtle()
screen = t.Screen()
t.colormode(255) #important - as without it error thrown for color
tim.speed("fastest")
tim.penup() # This will stop drawing line
color_list = [ (199, 175, 118), (125, 36, 24), (187, 158, 50), (170, 105, 56), (5, 57, 83), (200, 216, 205), (108, 67, 85), (39, 36, 35), (86, 142, 58), (20, 123, 176), (110, 161, 175), (75, 39, 47), (9, 67, 47), (64, 153, 137), (133, 41, 43), (184, 98, 80), (179, 201, 186), (210, 200, 113), (179, 175, 177), (151, 176, 164), (93, 142, 156), (28, 80, 59), (194, 190, 192), (17, 78, 98), (213, 184, 173), (145, 116, 121), (176, 197, 202)]

tim.setheading(225)
tim.forward(300)
tim.setheading(0)
number_of_dots = 100

for dot_count in range(1,number_of_dots+1):
    tim.dot(20,random.choice(color_list))
    tim.forward(50)

    if dot_count % 10 == 0:
        tim.setheading(90)
        tim.forward(50)
        tim.setheading(180)
        tim.forward(500)
        tim.setheading(0)

screen.exitonclick()


